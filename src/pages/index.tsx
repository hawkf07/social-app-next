import type { NextPage } from "next";
import Head from "next/head";
import { FaArrowUp } from "@react-icons/all-files/fa/FaArrowUp";
import { FaArrowDown } from "@react-icons/all-files/fa/FaArrowDown";
import { Card, CardBody, CardVotes } from "../components/Card";
import { Navbar } from "../components/Navbar";
import { trpc } from "../utils/trpc";
import { useVotesStore } from "../utils/useVotesStore";
import { useSession } from "next-auth/react";
import { useState } from "react";

const Home: NextPage = () => {
  const hello = trpc.useQuery(["example.hello", { text: "from tRPC" }]);
  const session = useSession();
  const { decrementVotes, incrementVotes, votesCount, voteType } =
    useVotesStore();

  const [descriptionText, setDescriptionText] = useState("");
  const [titleText, setTitleText] = useState("");

  const postMutation = trpc.useMutation(["posts.create-post"]);
  const postList = trpc.useQuery(["posts.get-all"]);
  return (
    <>
      <Head>
        <title>Fredit App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main className="flex flex-col items-center justify-center p-5">
        <form
          className="flex flex-col items-center "
          onSubmit={(e) => {
            e.preventDefault();
            postMutation.mutate({
              title: titleText,
              description: descriptionText,
            });
          }}
        >
          <h1> Create Posts </h1>
          <input
            className="border-2 shadow"
            type="text"
            onChange={(e) => setTitleText(e.target.value)}
          />
          <textarea
            className="border-2 shadow"
            value={descriptionText}
            onChange={(e) => setDescriptionText(e.target.value)}
          ></textarea>
          <button type="submit" className="bg-blue-400 p-3 px-5">
            submit
          </button>
        </form>

        <Card>
          <CardVotes
            votes={votesCount}
            onDecrementVotesClick={decrementVotes}
            onIncrementVotesClick={incrementVotes}
          />
          <CardBody
            author="fikri"
            datePosted="4h ago"
            description={<>Hello World from title</>}
            title="this is the title"
            totalCommentCount={10}
          />
        </Card>
        {postList?.data.map((item) => {
          return <>{item.title}</>;
        })}
      </main>
    </>
  );
};

export default Home;
